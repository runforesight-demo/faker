name: Python Tests

on:  
  schedule:
    - cron: '0 */3 * * *'
  workflow_dispatch:
  pull_request:
    branches:
      - master

env:
  FORESIGHT_UPLOADER_SIGNER_URL: https://upload.service.runforesight.us
  WORKFLOW_TELEMETRY_BASE_URL: https://api.service.runforesight.us

permissions:
  contents: read

jobs:
  checkmanifest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-checkmanifest
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install tox
    - name: Check manifest
      run: tox
      env:
        TOXENV: checkmanifest

  isort:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-isort
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install isort
    - name: Import order checking with isort
      uses: liskin/gh-problem-matcher-wrap@v1
      with:
        linters: isort
        run: isort --check --diff .

  black:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-black
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install tox
    - name: Formatting with black
      run: tox
      env:
        TOXENV: black

  doc8:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-pep8
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install tox
    - name: Doc formatting
      run: tox
      env:
        TOXENV: doc8
        

  test_ubuntu:
    runs-on: ubuntu-latest
    needs: [isort, black, doc8, checkmanifest]
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10", "pypy-3.9"]

    steps:
      - uses: actions/checkout@v3
      - name: Collect Workflow Telemetry
        if: always()
        uses: runforesight/foresight-workflow-kit-action@v1
        with:
          api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
      - name: Setup pip cache
        uses: actions/cache@v3
        id: pipcache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test_ubuntu
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox and any other packages
        run: python -m pip install tox coveralls
      - name: pytest
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: pytest
          run: tox -e py
        env:
          COVERALLS_PARALLEL: true
          COVERALLS_FLAG_NAME: run-ubuntu-${{ matrix.python }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github
      - name: Analyze Test and/or Coverage Results
        uses: runforesight/foresight-test-kit-action@v1
        if: ${{ always() }}
        with:
          api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
          test_format: JUNIT
          test_framework: PYTEST
          test_path: ./results/**
          coverage_path: ./coverage.xml
          coverage_format: COBERTURA/XML

  test_windows:
    runs-on: windows-latest
    needs: [isort, black, doc8, checkmanifest]
    strategy:
      matrix:
        python: ["3.7", "3.8", "3.9", "3.10"]
        arch: ["x86", "x64"]

    steps:
      - uses: actions/checkout@v3
      - name: Collect Workflow Telemetry
        if: always()
        uses: runforesight/foresight-workflow-kit-action@v1
        with:
          api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
      - name: Setup pip cache
        uses: actions/cache@v3
        id: pipcache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test_windows
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox and any other packages
        run: python -m pip install tox coveralls
      - name: Run Tox
        # Run tox using the version of Python in `PATH`
        run: tox -e py
      - name: Analyze Test and/or Coverage Results
        uses: runforesight/foresight-test-kit-action@v1
        if: ${{ always() }}
        with:
          api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
          test_format: JUNIT
          test_framework: PYTEST
          test_path: ./results/**
          coverage_path: ./coverage.xml
          coverage_format: COBERTURA/XML

  test_alpine:
    runs-on: ubuntu-latest
    needs: [isort, black, doc8, checkmanifest]

    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test_alpine
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install tox
    - name: Run tests
      run: tox
      env:
        TOXENV: alpine
        TEST_ALPINE: 1
    - name: Analyze Test and/or Coverage Results
      uses: runforesight/foresight-test-kit-action@v1
      if: ${{ always() }}
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
        test_format: JUNIT
        test_framework: PYTEST
        test_path: ./results/**
        coverage_path: ./coverage.xml
        coverage_format: COBERTURA/XML

  test_32bit:
    runs-on: ubuntu-latest
    needs: [isort, black, doc8, checkmanifest]

    steps:
    - uses: actions/checkout@v3
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
    - name: Setup pip cache
      uses: actions/cache@v3
      id: pipcache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-test_32bit
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install tox
    - name: Run tests
      run: tox
      env:
        TOXENV: 32bit
        TEST_32BIT: 1
    - name: Analyze Test and/or Coverage Results
      uses: runforesight/foresight-test-kit-action@v1
      if: ${{ always() }}
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
        test_format: JUNIT
        test_framework: PYTEST
        test_path: ./results/**
        coverage_path: ./coverage.xml
        coverage_format: COBERTURA/XML
        #cli_version: 1.2.0
  finish:
    needs: [test_ubuntu, test_windows, test_alpine, test_32bit]
    runs-on: ubuntu-latest
    steps:
    - name: Collect Workflow Telemetry
      if: always()
      uses: runforesight/foresight-workflow-kit-action@v1
      with:
        api_key: ${{ secrets.FORESIGHT_PROJECT_WALL_APIKEY }}
